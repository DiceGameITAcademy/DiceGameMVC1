[["/home/user/Documents/NODE/DiceGameMVC1/src/controllers/getAllPlayers.test.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport { getAllPlayers } from \"./PlayerControllerCheck\";\nimport Player from \"src/models/playerModelCheck\";\n\ndescribe('getAllPlayers', () => {\n  it('should return a list of all players in the database', async () => {\n    const mockPlayers = [\n      { id: 1, name: 'Player 1', password: 'password1', wins: 0, losses: 0 },\n      { id: 2, name: 'Player 2', password: 'password2', wins: 0, losses: 0 },\n      { id: 3, name: 'Player 3', password: 'password3', wins: 0, losses: 0 }\n    ];\n\n    Player.findAll = jest.fn().mockResolvedValue(mockPlayers);\n\n    const req = {} as Request;\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn()\n    } as unknown as Response;\n    const next = jest.fn();\n\n    await getAllPlayers(req, res, next);\n\n    expect(Player.findAll).toHaveBeenCalledWith({});\n    expect(res.status).toHaveBeenCalledWith(200);\n    expect(res.json).toHaveBeenCalledWith({ players: mockPlayers });\n    expect(next).not.toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/controllers/PlayerControllerCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/playerModelCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/src/types/playerTypes.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/gameModel.ts","/home/user/Documents/NODE/DiceGameMVC1/src/controllers/GameService.ts","/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/controllers/PlayerControllerCheck.ts",{"fileContent":"import { Request, Response, NextFunction } from \"express\";\nimport Player from \"../models/playerModelCheck\";\nimport { CreatePlayerRequest } from \"../types/playerTypes\";\nimport { GameDb } from \"../models/gameModel\";\n(\"../models/GameModel\");\nimport { playGame } from \"./GameService\";\n(\"../controllers/GameService\");\n\nexport async function createPlayer(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    let { name, password }: CreatePlayerRequest = req.body;\n\n    if (!name) {\n      name = \"ANONYMOUS\";\n    }\n\n    const existingPlayer = await Player.findOne({ where: { name } });\n    if (existingPlayer) {\n      return res\n        .status(400)\n        .json({\n          error: \"Player already exists, choose another name or go to log in\",\n        });\n    }\n\n    if (password.length < 6) {\n      return res\n        .status(400)\n        .json({ error: \"Password should be at least 6 characters long\" });\n    }\n\n    const newPlayer = await Player.create({ name, password });\n\n    res\n      .status(201)\n      .json({ message: \"Player created successfully\", player: newPlayer });\n\n    next();\n  } catch (error) {\n    console.error(\"Error creating player:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\nexport async function getAllPlayers(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const players = await Player.findAll();\n\n    res.status(200).json({ players });\n  } catch (error) {\n    console.error(\"Error fetching players:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\nexport async function modifyPlayerName(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const { name }: { name: string } = req.body;\n\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    player.name = name;\n    await player.save();\n\n    res\n      .status(200)\n      .json({ message: \"Player name updated successfully\", player });\n  } catch (error) {\n    console.error(\"Error modifying player name:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//Play game for a player\n\nexport async function playGameForPlayer(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = Number(req.params.id);\n\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n   \n\n    const game = playGame(playerId);\n    const newGame = await GameDb.create(game);\n\n    res\n      .status(200)\n      .json({ message: \"Game played successfully\", game: newGame });\n  } catch (error) {\n    console.error(\"Error playing game:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//Get all games for a player\nexport async function getPlayerGames(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    const games = await GameDb.findAll({ where: { playerId } });\n\n    res.status(200).json({ games });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//Delete all games for a player\nexport async function deletePlayerGames(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    await GameDb.destroy({ where: { playerId } });\n\n    res.status(200).json({ message: \"Games deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n//winning games for a player\n\nexport async function getPlayerWinningGames(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    const games = await GameDb.findAll({ where: { playerId, win: true } });\n\n    res.status(200).json({ games });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//losing games for a player\n\nexport async function getPlayerLosingGames(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    const games = await GameDb.findAll({ where: { playerId, win: false } });\n\n    res.status(200).json({ games });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\nexport async function deletePlayer(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    await player.destroy();\n\n    res.status(200).json({ message: \"Player deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting player:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n// Get winning percentage for a player\n\nexport async function getPlayerWinningPercentage(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const playerId = req.params.id;\n    const player = await Player.findOne({ where: { id: playerId } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    const games = await GameDb.findAll({ where: { playerId } });\n    const winningGames = await GameDb.findAll({\n      where: { playerId, win: true },\n    });\n    const winningPercentage = (winningGames.length / games.length) * 100;\n\n    res.status(200).json({ winningPercentage });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n// Get average win percentage for all players\n\nexport async function getAverageWinningPercentage(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const players = await Player.findAll();\n    let totalWinningPercentage = 0;\n    for (let i = 0; i < players.length; i++) {\n      const games = await GameDb.findAll({\n        where: { playerId: players[i].id },\n      });\n      const winningGames = await GameDb.findAll({\n        where: { playerId: players[i].id, win: true },\n      });\n      const winningPercentage = (winningGames.length / games.length) * 100;\n      totalWinningPercentage += winningPercentage;\n    }\n    const averageWinningPercentage = totalWinningPercentage / players.length;\n\n    res.status(200).json({ averageWinningPercentage });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//get ranking of players based on wins\n\nexport async function getRanking(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const players = await Player.findAll();\n    let ranking = [];\n    for (let i = 0; i < players.length; i++) {\n      const games = await GameDb.findAll({\n        where: { playerId: players[i].id },\n      });\n      const winningGames = await GameDb.findAll({\n        where: { playerId: players[i].id, win: true },\n      });\n      const winningPercentage = (winningGames.length / games.length) * 100;\n      ranking.push({ name: players[i].name, winningPercentage });\n    }\n    ranking.sort((a, b) => b.winningPercentage - a.winningPercentage);\n    res.status(200).json({ ranking });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//get ranking of players based on losses\n\nexport async function getRankingLosses(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const players = await Player.findAll();\n    let ranking = [];\n    for (let i = 0; i < players.length; i++) {\n      const games = await GameDb.findAll({\n        where: { playerId: players[i].id },\n      });\n      const losingGames = await GameDb.findAll({\n        where: { playerId: players[i].id, win: false },\n      });\n      const losingPercentage = (losingGames.length / games.length) * 100;\n      ranking.push({ name: players[i].name, losingPercentage });\n    }\n    ranking.sort((a, b) => b.losingPercentage - a.losingPercentage);\n    res.status(200).json({ ranking });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\n//get ranking of players based on average win percentage\n\nexport async function getRankingAverage(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const players = await Player.findAll();\n    let ranking = [];\n    for (let i = 0; i < players.length; i++) {\n      const games = await GameDb.findAll({\n        where: { playerId: players[i].id },\n      });\n      const winningGames = await GameDb.findAll({\n        where: { playerId: players[i].id, win: true },\n      });\n      const winningPercentage = (winningGames.length / games.length) * 100;\n      ranking.push({ name: players[i].name, winningPercentage });\n    }\n    ranking.sort((a, b) => b.winningPercentage - a.winningPercentage);\n    res.status(200).json({ ranking });\n  } catch (error) {\n    console.error(\"Error fetching player games:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\nexport async function playerLogin(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    const { name, password }: { name: string; password: string } = req.body;\n\n    // Check if the player exists by name\n    const player = await Player.findOne({ where: { name } });\n    if (!player) {\n      return res.status(404).json({ error: \"Player not found\" });\n    }\n\n    // Check if the provided password matches the player's password\n    if (player.password !== password) {\n      return res.status(401).json({ error: \"Incorrect password\" });\n    }\n\n    // Player is successfully logged in\n    res.status(200).json({ message: \"Player logged in successfully\", player });\n  } catch (error) {\n    console.error(\"Error logging in player:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n\nexport async function playerLogout(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  try {\n    // You can perform any necessary logic for logging out a player here\n    // For example, clearing session data or tokens\n\n    // Respond with a success message\n    res.status(200).json({ message: \"Player logged out successfully\" });\n  } catch (error) {\n    console.error(\"Error logging out player:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n\n    next(error);\n  }\n}\n","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/models/playerModelCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/src/types/playerTypes.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/gameModel.ts","/home/user/Documents/NODE/DiceGameMVC1/src/controllers/GameService.ts","/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/game.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/models/playerModelCheck.ts",{"fileContent":"import { Model, DataTypes } from 'sequelize';\nimport  sequelize  from '../../config/sequelize.config';\n\nclass Player extends Model {\n  public id!: number;\n  public name!: string;\n  public password!: string;\n  public wins!: number;\n  public losses!: number;\n\n  // Define other fields as needed\n\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n}\n\nPlayer.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    wins: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n    },\n    losses: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n    },\n    // Define other fields as needed\n  },\n  {\n    sequelize,\n    modelName: 'Player',\n    tableName: 'players',\n    timestamps: false,\n  }\n);\n\nexport default Player;\n","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts",{"fileContent":"import { Sequelize } from 'sequelize-typescript';\n// import { Player } from '../models/player.model'; // Import your Player model\n\nconst sequelize = new Sequelize({\n  database: 'dicegame',\n  username: 'root',\n  password: 'password',\n  dialect: 'mysql',\n  host: 'localhost',\n  port: 3306,\n  logging: console.log,\n});\n\n// sequelize.addModels([Player]); // Add your Player model to Sequelize\n\nexport default sequelize;","resolvedModuleNames":[]}],["/home/user/Documents/NODE/DiceGameMVC1/src/models/gameModel.ts",{"fileContent":"import { DataTypes,Model, Sequelize } from 'sequelize';\nimport  sequelize  from '../../config/sequelize.config';\n\ninterface GameAttributes{\n\tid: number;\n\tdiceValue1: number;\n\tdiceValue2: number;\n\tresult: number;\n\twin: boolean;\n    playerId: number;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n}\n\nexport interface GameInstance extends Model<GameAttributes>, GameAttributes {}\n\nexport const GameDb = sequelize.define<GameInstance>('Games', {\n    id: {\n        type: DataTypes.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n    },\n\tdiceValue1: {\n\t\ttype: DataTypes.INTEGER,\n\t\tallowNull: false\n\t},\n\tdiceValue2: {\n\t\ttype: DataTypes.INTEGER,\n\t\tallowNull: false\n\t},\n\tresult: {\n\t\ttype: DataTypes.INTEGER,\n\t\tallowNull: false\n\t},\n\twin: {\n\t\ttype: DataTypes.BOOLEAN,\n\t\tallowNull: false\n\t},\n\tcreatedAt: {\n\t\ttype: DataTypes.DATE,\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n\t\tallowNull: false\n\t},\n\tupdatedAt: {\n\t\ttype: DataTypes.DATE,\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n\t\tallowNull: false\n\t},\n\tplayerId: {\n\t\ttype: DataTypes.INTEGER,\n\t\treferences: {\n\t\t\tmodel: 'players',\n\t\t\tkey: 'id'\n\t\t},\n\t\tallowNull: false\n\t}\n});\n\nGameDb.sync()","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/controllers/GameService.ts",{"fileContent":"import { Game } from '../models/game'\n\nexport const roll = () => {\n\treturn Math.floor(Math.random() * 6) + 1;\n};\n\nexport const calcResult = (roll1: number, roll2: number) => {\n\treturn roll1 + roll2;\n};\n\nexport const checkWin = (result: number) => {\n     if (result === 7) return true  \n        else return false\n}   \n\nexport const playGame = (id:number): Game => {\n    if(typeof id !== 'number') throw new Error('id must be a number'\n    )\n\tconst gameId = Math.random() * 1000;\n\tconst diceValue1: number = roll();\n\tconst diceValue2: number = roll();\n\tconst result: number = calcResult(diceValue1,diceValue2);\n\tconst win: boolean = checkWin(result);\n\tconst playerId: number = id;\n\n\n\tconst gameResult: Game = {\n        id : gameId,\n\t\tdiceValue1,\n\t\tdiceValue2,\n\t\tresult,\n        win,\n\t\tplayerId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n\t};\n\n\treturn gameResult;\n};","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/models/game.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/__tests__/types/controllers/getAllPlayers.test.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport { getAllPlayers } from \"../../../controllers/PlayerControllerCheck\";\nimport Player from \"src/models/playerModelCheck\";\n\ndescribe('getAllPlayers', () => {\n  it('should return a list of all players in the database', async () => {\n    const mockPlayers = [\n      { id: 1, name: 'Player 1', password: 'password1', wins: 0, losses: 0 },\n      { id: 2, name: 'Player 2', password: 'password2', wins: 0, losses: 0 },\n      { id: 3, name: 'Player 3', password: 'password3', wins: 0, losses: 0 }\n    ];\n\n    Player.findAll = jest.fn().mockResolvedValue(mockPlayers);\n\n    const req = {} as Request;\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn()\n    } as unknown as Response;\n    const next = jest.fn();\n\n    await getAllPlayers(req, res, next);\n\n    expect(Player.findAll).toHaveBeenCalledWith({});\n    expect(res.status).toHaveBeenCalledWith(200);\n    expect(res.json).toHaveBeenCalledWith({ players: mockPlayers });\n    expect(next).not.toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/controllers/PlayerControllerCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/playerModelCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/src/types/playerTypes.ts","/home/user/Documents/NODE/DiceGameMVC1/src/models/gameModel.ts","/home/user/Documents/NODE/DiceGameMVC1/src/controllers/GameService.ts","/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/__tests__/controllers/getAllPlayers.test.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport { getAllPlayers } from \"../../../controllers/PlayerControllerCheck\";\nimport Player from \"src/models/playerModelCheck\";\n\ndescribe('getAllPlayers', () => {\n  it('should return a list of all players in the database', async () => {\n    const mockPlayers = [\n      { id: 1, name: 'Player 1', password: 'password1', wins: 0, losses: 0 },\n      { id: 2, name: 'Player 2', password: 'password2', wins: 0, losses: 0 },\n      { id: 3, name: 'Player 3', password: 'password3', wins: 0, losses: 0 }\n    ];\n\n    Player.findAll = jest.fn().mockResolvedValue(mockPlayers);\n\n    const req = {} as Request;\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn()\n    } as unknown as Response;\n    const next = jest.fn();\n\n    await getAllPlayers(req, res, next);\n\n    expect(Player.findAll).toHaveBeenCalledWith({});\n    expect(res.status).toHaveBeenCalledWith(200);\n    expect(res.json).toHaveBeenCalledWith({ players: mockPlayers });\n    expect(next).not.toHaveBeenCalled();\n  });\n});\n","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/models/playerModelCheck.ts","/home/user/Documents/NODE/DiceGameMVC1/config/sequelize.config.ts"]}],["/home/user/Documents/NODE/DiceGameMVC1/src/__tests__/types/createPlayerRequest.test.ts",{"fileContent":"   import { CreatePlayerRequest } from \"src/types/playerTypes\";\n   \n   // Create a player with a valid name and password\n    it('should create a player with a valid name and password', () => {\n        const request: CreatePlayerRequest = {\n          name: 'John Doe',\n          password: 'password123'\n        };\n  \n        const result = code_under_test.createPlayer(request);\n  \n        expect(result).toBeDefined();\n        expect(result.name).toBe(request.name);\n        expect(result.password).toBe(request.password);\n      });","resolvedModuleNames":["/home/user/Documents/NODE/DiceGameMVC1/src/types/playerTypes.ts"]}]]