[["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\controllers\\getAllPlayers.test.ts",{"fileContent":"import { Request, Response } from \"express\";\r\nimport { getAllPlayers } from \"../../../src/controllers/PlayerControllerCheck\";\r\nimport Player from \"../../../src/models/playerModelCheck\";\r\n\r\ndescribe(\"test the getAllPlayers function\", () => {\r\n  it(\"should return all players when there are no errors\", async () => {\r\n    const players = [\r\n      { id: 1, name: \"Player 1\" },\r\n      { id: 2, name: \"Player 2\" },\r\n    ];\r\n    Player.findAll = jest.fn().mockResolvedValue(players);\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(Player.findAll).toHaveBeenCalled();\r\n    expect(res.status).toHaveBeenCalledWith(200);\r\n    expect(res.json).toHaveBeenCalledWith({ players });\r\n    expect(next).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it(\"should return a 200 status code\", async () => {\r\n    const players = [\r\n      { id: 1, name: \"Player 1\" },\r\n      { id: 2, name: \"Player 2\" },\r\n    ];\r\n    Player.findAll = jest.fn().mockResolvedValue(players);\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(res.status).toHaveBeenCalledWith(200);\r\n  });\r\n\r\n  it(\"should return a JSON object with players array\", async () => {\r\n    const players = [\r\n      { id: 1, name: \"Player 1\" },\r\n      { id: 2, name: \"Player 2\" },\r\n    ];\r\n    Player.findAll = jest.fn().mockResolvedValue(players);\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(res.json).toHaveBeenCalledWith({ players });\r\n  });\r\n\r\n  it(\"should return a 500 status code when there is an error\", async () => {\r\n    Player.findAll = jest.fn().mockRejectedValue(new Error(\"Database error\"));\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(res.status).toHaveBeenCalledWith(500);\r\n  });\r\n\r\n  it(\"should call the next function with the error\", async () => {\r\n    Player.findAll = jest.fn().mockRejectedValue(new Error(\"Database error\"));\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(next).toHaveBeenCalledWith(new Error(\"Database error\"));\r\n  });\r\n\r\n  it(\"should catch and log errors\", async () => {\r\n    const error = new Error(\"Database error\");\r\n    Player.findAll = jest.fn().mockRejectedValue(error);\r\n    console.error = jest.fn();\r\n\r\n    const req = {} as Request;\r\n    const res = {\r\n      status: jest.fn().mockReturnThis(),\r\n      json: jest.fn(),\r\n    } as unknown as Response;\r\n    const next = jest.fn();\r\n\r\n    await getAllPlayers(req, res, next);\r\n\r\n    expect(console.error).toHaveBeenCalledWith(\r\n      \"Error fetching players:\",\r\n      error\r\n    );\r\n  });\r\n});\r\n\r\n// npx jest src/__tests__/controllers/getAllPlayers.test.ts\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/controllers/PlayerControllerCheck.ts","C:/Users/Ivand/DiceGameMVC1/src/models/playerModelCheck.ts","C:/Users/Ivand/DiceGameMVC1/src/types/playerTypes.ts","C:/Users/Ivand/DiceGameMVC1/src/models/gameModel.ts","C:/Users/Ivand/DiceGameMVC1/src/controllers/GameService.ts","C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\controllers\\PlayerControllerCheck.ts",{"fileContent":"import { Request, Response, NextFunction } from \"express\";\r\nimport Player from \"../models/playerModelCheck\";\r\nimport { CreatePlayerRequest } from \"../types/playerTypes\";\r\nimport { GameDb } from \"../models/gameModel\";\r\n(\"../models/GameModel\");\r\nimport { playGame } from \"./GameService\";\r\n(\"../controllers/GameService\");\r\n\r\nexport async function createPlayer(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    let { name, password }: CreatePlayerRequest = req.body;\r\n\r\n    if (!name) {\r\n      name = \"ANONYMOUS\";\r\n    }\r\n\r\n    const existingPlayer = await Player.findOne({ where: { name } });\r\n    if (existingPlayer) {\r\n      return res.status(400).json({\r\n        error: \"Player already exists, choose another name or go to log in\",\r\n      });\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      return res\r\n        .status(400)\r\n        .json({ error: \"Password should be at least 6 characters long\" });\r\n    }\r\n\r\n    const newPlayer = await Player.create({ name, password });\r\n\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Player created successfully\", player: newPlayer });\r\n\r\n    next();\r\n  } catch (error) {\r\n    console.error(\"Error creating player:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function getAllPlayers(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const players = await Player.findAll();\r\n\r\n    res.status(200).json({ players });\r\n    console.log(players)\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching players:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function modifyPlayerName(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const { name }: { name: string } = req.body;\r\n\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    player.name = name;\r\n    await player.save();\r\n\r\n    res\r\n      .status(200)\r\n      .json({ message: \"Player name updated successfully\", player });\r\n  } catch (error) {\r\n    console.error(\"Error modifying player name:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//Play game for a player\r\n//REVISAR\r\n//esta poniendo el id DEL JUGADOR EN EL ID DEL game I POR ESTO NO SE PUEDE VOLVER A HACER\r\nexport async function playGameForPlayer(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = Number(req.params.id);\r\n\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    const game = playGame(playerId);\r\n    const newGame = await GameDb.create(game);\r\n\r\n    res\r\n      .status(200)\r\n      .json({ message: \"Game played successfully\", game: newGame });\r\n  } catch (error) {\r\n    console.error(\"Error playing game:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//Get all games for a player\r\nexport async function getPlayerGames(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    const games = await GameDb.findAll({ where: { playerId } });\r\n\r\n    res.status(200).json({ games });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//Delete all games for a player\r\nexport async function deletePlayerGames(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    await GameDb.destroy({ where: { playerId } });\r\n\r\n    res.status(200).json({ message: \"Games deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n//winning games for a player\r\n\r\nexport async function getPlayerWinningGames(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    const games = await GameDb.findAll({ where: { playerId, win: true } });\r\n\r\n    res.status(200).json({ games });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//losing games for a player\r\n\r\nexport async function getPlayerLosingGames(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    const games = await GameDb.findAll({ where: { playerId, win: false } });\r\n\r\n    res.status(200).json({ games });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function deletePlayer(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    await player.destroy();\r\n\r\n    res.status(200).json({ message: \"Player deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting player:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n// Get winning percentage for a player\r\n\r\nexport async function getPlayerWinningPercentage(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const playerId = req.params.id;\r\n    const player = await Player.findOne({ where: { id: playerId } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    const games = await GameDb.findAll({ where: { playerId } });\r\n    const winningGames = await GameDb.findAll({\r\n      where: { playerId, win: true },\r\n    });\r\n    const winningPercentage = (winningGames.length / games.length) * 100;\r\n\r\n    res.status(200).json({ winningPercentage });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//get ranking of players based on WINS\r\n\r\n\r\nexport async function getRanking(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const players = await Player.findAll();\r\n\r\n    const ranking = await Promise.all(\r\n      players.map(async (player) => {\r\n        const winningGames = await GameDb.findAll({\r\n          where: { playerId: player.id, win: true },\r\n        });\r\n\r\n        const numberOfWins = winningGames.length;\r\n\r\n        return { name: player.name, numberOfWins };\r\n      })\r\n    );\r\n\r\n    ranking.sort((a, b) => b.numberOfWins - a.numberOfWins);\r\n\r\n    res.status(200).json({ ranking });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//get ranking of players based on losses\r\n//ORDENAR Y QUE SOLO SALGA EL NOMBRE Y EL NUMERO DE DERROTAS\r\n//que funcionee!!!\r\n\r\n\r\nexport async function getRankingLosses(\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n  ) {\r\n    try {\r\n      const players = await Player.findAll();\r\n  \r\n      const ranking = await Promise.all(\r\n        players.map(async (player) => {\r\n          const losingGames = await GameDb.findAll({\r\n            where: { playerId: player.id, win: false },\r\n          });\r\n  \r\n          const numberOfLosses = losingGames.length;\r\n  \r\n          return { name: player.name, numberOfLosses };\r\n        })\r\n      );\r\n  \r\n      ranking.sort((a, b) => b.numberOfLosses - a.numberOfLosses);\r\n  \r\n      res.status(200).json({ ranking });\r\n    } catch (error) {\r\n      console.error(\"Error fetching player games:\", error);\r\n      res.status(500).json({ error: \"Internal server error\" });\r\n  \r\n      next(error);\r\n    }\r\n  }\r\n\r\n//get ranking of players based on average win percentage\r\n//falta ordenar!!!\r\n\r\nexport async function getRankingAverage(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const players = await Player.findAll();\r\n\r\n    const rankingPromises = players.map(async (player) => {\r\n      const games = await GameDb.findAll({ where: { playerId: player.id } });\r\n      const winningGames = await GameDb.findAll({\r\n        where: { playerId: player.id, win: true },\r\n      });\r\n      const winningPercentage = games.length > 0 ? (winningGames.length / games.length) * 100 : 0;\r\n\r\n      return {\r\n        name: player.name,\r\n        winningPercentage,\r\n      };\r\n    });\r\n\r\n    const ranking = (await Promise.all(rankingPromises))\r\n      .sort((a, b) => (b.winningPercentage || 0) - (a.winningPercentage || 0));\r\n\r\n    res.status(200).json({ ranking });\r\n  } catch (error) {\r\n    console.error(\"Error fetching player games:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\n//LOGIN AND LOGOUT\r\n\r\nexport async function playerLogin(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    const { name, password }: { name: string; password: string } = req.body;\r\n\r\n    // Check if the player exists by name\r\n    const player = await Player.findOne({ where: { name } });\r\n    if (!player) {\r\n      return res.status(404).json({ error: \"Player not found\" });\r\n    }\r\n\r\n    // Check if the provided password matches the player's password\r\n    if (player.password !== password) {\r\n      return res.status(401).json({ error: \"Incorrect password\" });\r\n    }\r\n\r\n    // Player is successfully logged in\r\n    res.status(200).json({ message: \"Player logged in successfully\", player });\r\n  } catch (error) {\r\n    console.error(\"Error logging in player:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n\r\nexport async function playerLogout(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) {\r\n  try {\r\n    // You can perform any necessary logic for logging out a player here\r\n    // For example, clearing session data or tokens\r\n\r\n    // Respond with a success message\r\n    res.status(200).json({ message: \"Player logged out successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error logging out player:\", error);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n\r\n    next(error);\r\n  }\r\n}\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/playerModelCheck.ts","C:/Users/Ivand/DiceGameMVC1/src/types/playerTypes.ts","C:/Users/Ivand/DiceGameMVC1/src/models/gameModel.ts","C:/Users/Ivand/DiceGameMVC1/src/controllers/GameService.ts","C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts","C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\models\\playerModelCheck.ts",{"fileContent":"import { Model, DataTypes } from 'sequelize';\r\nimport  sequelize  from '../../config/sequelize.config';\r\n\r\nclass Player extends Model {\r\n  public id!: number;\r\n  public name!: string;\r\n  public password!: string;\r\n  public wins!: number;\r\n  public losses!: number;\r\n\r\n\r\n  public readonly createdAt!: Date;\r\n  public readonly updatedAt!: Date;\r\n}\r\n\r\nPlayer.init(\r\n  {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    wins: {\r\n      type: DataTypes.INTEGER,\r\n      defaultValue: 0,\r\n    },\r\n    losses: {\r\n      type: DataTypes.INTEGER,\r\n      defaultValue: 0,\r\n    },\r\n  },\r\n  {\r\n    sequelize,\r\n    modelName: 'Player',\r\n    tableName: 'players',\r\n    timestamps: false,\r\n  }\r\n);\r\n\r\nexport default Player;\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\config\\sequelize.config.ts",{"fileContent":"import { Sequelize } from \"sequelize-typescript\";\r\n\r\nconst sequelize = new Sequelize({\r\n  database: \"dicegame\",\r\n  username: \"root\",\r\n  password: \"password\",\r\n  dialect: \"mysql\",\r\n  host: \"localhost\",\r\n  port: 3306,\r\n  logging: console.log,\r\n});\r\n\r\nexport default sequelize;\r\n","resolvedModuleNames":[]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\models\\gameModel.ts",{"fileContent":"import { DataTypes,Model, Sequelize } from 'sequelize';\r\nimport  sequelize  from '../../config/sequelize.config';\r\n\r\ninterface GameAttributes{\r\n\tid: number;\r\n\tdiceValue1: number;\r\n\tdiceValue2: number;\r\n\tresult: number;\r\n\twin: boolean;\r\n    playerId: number;\r\n\tcreatedAt: Date;\r\n\tupdatedAt: Date;\r\n}\r\n\r\nexport interface GameInstance extends Model<GameAttributes>, GameAttributes {}\r\n\r\nexport const GameDb = sequelize.define<GameInstance>('Games', {\r\n    id: {\r\n        type: DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement: true\r\n    },\r\n\tdiceValue1: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\tdiceValue2: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\tresult: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\twin: {\r\n\t\ttype: DataTypes.BOOLEAN,\r\n\t\tallowNull: false\r\n\t},\r\n\tcreatedAt: {\r\n\t\ttype: DataTypes.DATE,\r\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n\t\tallowNull: false\r\n\t},\r\n\tupdatedAt: {\r\n\t\ttype: DataTypes.DATE,\r\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n\t\tallowNull: false\r\n\t},\r\n\tplayerId: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\treferences: {\r\n\t\t\tmodel: 'players',\r\n\t\t\tkey: 'id'\r\n\t\t},\r\n\t\tallowNull: false\r\n\t}\r\n});\r\n\r\nGameDb.sync()","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\controllers\\GameService.ts",{"fileContent":"\r\nimport { Game } from '../models/game'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const roll = () => {\r\n\treturn Math.floor(Math.random() * 6) + 1;\r\n};\r\n\r\nexport const calcResult = (roll1: number, roll2: number) => {\r\n\treturn roll1 + roll2;\r\n};\r\n\r\nexport const checkWin = (result: number) => {\r\n     if (result === 7) return true  \r\n        else return false\r\n}   \r\nfunction generateRandomNumber() {\r\n    const uuid = uuidv4();\r\n    const hex = uuid.replace(/-/g, '').slice(0, 6);  // Tomar solo los primeros 15 caracteres\r\n    const bigIntValue = BigInt('0x' + hex);\r\n    return Number(bigIntValue);\r\n}\r\n\r\nexport const playGame = (id:number): Game => {\r\n    if(typeof id !== 'number') throw new Error('id must be a number'\r\n    )\r\n\tconst gameId :number = generateRandomNumber();\r\n\tconst diceValue1: number = roll();\r\n\tconst diceValue2: number = roll();\r\n\tconst result: number = calcResult(diceValue1,diceValue2);\r\n\tconst win: boolean = checkWin(result);\r\n\tconst playerId: number = id;\r\n\r\n\r\n\tconst gameResult: Game = {\r\n        id : gameId,\r\n\t\tdiceValue1,\r\n\t\tdiceValue2,\r\n\t\tresult,\r\n        win,\r\n\t\tplayerId,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n\t};\r\n\r\n\treturn gameResult;\r\n};\r\n\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\game.test.ts",{"fileContent":"// game.test.ts\r\n\r\nimport { Game } from '../models/game'; \r\n\r\n// describe('Game Interface', () => {\r\n//   it('should create a game object with the correct properties', () => {\r\n//     const game: Game = {\r\n//       id: 1,\r\n//       playerId: 2,\r\n//       diceValue1: 3,\r\n//       diceValue2: 4,\r\n//       result: 7,\r\n//       win: true,\r\n//       createdAt: new Date('2023-10-04T10:35:40Z'),\r\n//       updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n//     };\r\n\r\n//     expect(game.id).toBe(1);\r\n//     expect(game.playerId).toBe(2);\r\n//     expect(game.diceValue1).toBe(3);\r\n//     expect(game.diceValue2).toBe(4);\r\n//     expect(game.result).toBe(7);\r\n//     expect(game.win).toBe(true);\r\n//     expect(game.createdAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n//     expect(game.updatedAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n//   });\r\n// });\r\n\r\ndescribe('Game Interface', () => {\r\n  it('should create a game object with the correct id', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.id).toBe(1);\r\n  });\r\n\r\n  it('should create a game object with the correct playerId', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.playerId).toBe(2);\r\n  });\r\n\r\n  it('should create a game object with the correct diceValue1', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.diceValue1).toBe(3);\r\n  });\r\n\r\n  it('should create a game object with the correct diceValue2', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.diceValue2).toBe(4);\r\n  });\r\n\r\n  it('should create a game object with the correct result', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.result).toBe(7);\r\n  });\r\n\r\n  it('should create a game object with the correct win', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.win).toBe(true);\r\n  });\r\n\r\n  it('should create a game object with the correct createdAt', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.createdAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n  });\r\n\r\n  it('should create a game object with the correct updatedAt', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.updatedAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n  });\r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\types\\createPlayerRequest.test.ts",{"fileContent":"   import { CreatePlayerRequest } from \"src/types/playerTypes\";\r\n   \r\n   describe('Test the CreatePlayerRequest Interface', () => {\r\n     it('should have a name property of type string', () => {\r\n       const request: CreatePlayerRequest = {\r\n         name: 'Amilkar Palangana',\r\n         password: 'myFavouritePassword',\r\n       };\r\n   \r\n       expect(typeof request.name).toBe('string');\r\n     });\r\n   \r\n     it('should have a password property of type string', () => {\r\n       const request: CreatePlayerRequest = {\r\n        name: 'Amilkar Palangana',\r\n         password: 'myFavouritePassword',\r\n       };\r\n   \r\n       expect(typeof request.password).toBe('string');\r\n       expect(request.name).toBe('Amilkar Palangana')\r\n     });\r\n   });\r\n   ","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/types/playerTypes.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\controllers\\GameService.test.ts",{"fileContent":"import { roll, calcResult, checkWin, playGame } from '../../controllers/GameService';\r\n\r\ndescribe('Game Logic', () => {\r\n  describe('roll', () => {\r\n    it('should generate a random number between 1 and 6', () => {\r\n      const result = roll();\r\n      expect(result).toBeGreaterThanOrEqual(1);\r\n      expect(result).toBeLessThanOrEqual(6);\r\n    });\r\n  });\r\n\r\n  \r\n\r\n  describe('calcResult', () => {\r\n    it('should calculate the sum of two numbers', () => {\r\n      const result = calcResult(2, 3);\r\n      expect(result).toBe(5);\r\n    });\r\n  });\r\n\r\n  describe('checkWin', () => {\r\n    it('should return true if the result is 7, otherwise false', () => {\r\n      expect(checkWin(7)).toBe(true);\r\n      expect(checkWin(5)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('playGame', () => {\r\n    it('should return a valid Game object with a defined id', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.id).toBeDefined();\r\n      });\r\n    \r\n      it('should return a valid Game object with diceValue1 in the range of 1 to 6', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.diceValue1).toBeGreaterThanOrEqual(1);\r\n        expect(game.diceValue1).toBeLessThanOrEqual(6);\r\n      });\r\n    \r\n      it('should return a valid Game object with diceValue2 in the range of 1 to 6', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.diceValue2).toBeGreaterThanOrEqual(1);\r\n        expect(game.diceValue2).toBeLessThanOrEqual(6);\r\n      });\r\n    \r\n      it('should return a valid Game object with result equal to the sum of diceValue1 and diceValue2', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.result).toBe(game.diceValue1 + game.diceValue2);\r\n      });\r\n    \r\n      it('should return a valid Game object with a boolean win property', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(typeof game.win).toBe('boolean');\r\n      });\r\n    \r\n      it('should return a valid Game object with playerId matching the provided playerId', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.playerId).toBe(playerId);\r\n      });\r\n    \r\n      it('should return a valid Game object with createdAt and updatedAt as instances of Date', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.createdAt).toBeInstanceOf(Date);\r\n        expect(game.updatedAt).toBeInstanceOf(Date);\r\n      });\r\n\r\n      it('should return a valid Game object with a winning result (sum = 7)', () => {\r\n        const playerId = 1;\r\n        let game = playGame(playerId);\r\n      \r\n        const modifiedGame = { ...game, diceValue1: 4, diceValue2: 3 };\r\n      \r\n        const sum = modifiedGame.diceValue1 + modifiedGame.diceValue2;\r\n        expect(sum).toBe(sum);\r\n        expect(true).toBe(true);\r\n      });\r\n\r\n    \r\n      it('should return a valid Game object with a losing result (sum <> 7)', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n    \r\n        \r\n        const modifiedGame = { ...game, diceValue1: 5, diceValue2: 6 }\r\n    \r\n       \r\n        const expectedSum = modifiedGame.diceValue1 +modifiedGame.diceValue2;\r\n        expect(expectedSum).toBe(expectedSum);\r\n        expect(false).toBe(false);\r\n      });\r\n    \r\n      it('should generate unique IDs for different game instances', () => {\r\n        const playerId = 1;\r\n        const game1 = playGame(playerId);\r\n        const game2 = playGame(playerId);\r\n    \r\n        expect(game1.id).not.toBe(game2.id);\r\n      });\r\n    \r\n      it('should generate unique IDs for different players', () => {\r\n        const game1 = playGame(1);\r\n        const game2 = playGame(2);\r\n    \r\n        expect(game1.id).not.toBe(game2.id);\r\n      });\r\n    \r\n  });\r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/controllers/GameService.ts","C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\models\\playerModel.test.ts",{"fileContent":"import Player from \"../../../src/models/playerModelCheck\";\r\n\r\ndescribe(\"PlayerModel should\", () => {\r\n  it(\"should save Player model to the database\", async () => {\r\n    const playerName: string = \"Dillinger\";\r\n    const playerPassword: string = \"alakulturin\";\r\n\r\n    const player = new Player();\r\n    player.name = playerName;\r\n    player.password = playerPassword;\r\n    player.wins = 0;\r\n    player.losses = 0;\r\n    await player.save();\r\n    expect(player.name).toBe(\"Dillinger\");\r\n    expect(player.password).toBe(\"alakulturin\");\r\n  });\r\n\r\n  it(\"should update Player model in the database\", async () => {\r\n    const player = new Player();\r\n    player.name = \"Dillinger\";\r\n    player.password = \"Alakulturin\";\r\n    player.wins = 0;\r\n    player.losses = 0;\r\n    await player.save();\r\n    player.name = \"Jane Smith\";\r\n    await player.save();\r\n    expect(player.name).toBe(\"Jane Smith\");\r\n  });\r\n\r\n  it(\"should not save Player model to the database without a name\", async () => {\r\n    const player = new Player();\r\n    player.password = \"password\";\r\n    player.wins = 0;\r\n    player.losses = 0;\r\n    await expect(player.save()).rejects.toThrow();\r\n  });\r\n\r\n  it(\"should not save Player model to the database without a password\", async () => {\r\n    const player = new Player();\r\n    player.name = \"Dillinger\";\r\n    player.wins = 0;\r\n    player.losses = 0;\r\n    await expect(player.save()).rejects.toThrow();\r\n  });\r\n\r\n  it(\"should create a player with all required fields\", () => {\r\n    const playerData = {\r\n      name: \"Dillinger\",\r\n      password: \"Alakulturin\",\r\n    };\r\n\r\n    const player = Player.build(playerData);\r\n\r\n    expect(player.name).toBe(playerData.name);\r\n    expect(player.password).toBe(playerData.password);\r\n    expect(player.wins).toBe(0);\r\n    expect(player.losses).toBe(0);\r\n  });\r\n\r\n  it(\"should delete a player successfully\", async () => {\r\n    const playerData = {\r\n      name: \"John Doe\",\r\n      password: \"password123\",\r\n    };\r\n\r\n    const player = await Player.create(playerData);\r\n\r\n    await player.destroy();\r\n\r\n    const deletedPlayer = await Player.findByPk(player.id);\r\n\r\n    expect(deletedPlayer).toBeNull();\r\n  });\r\n\r\n  it(\"should not create a player without a name or password\", async () => {\r\n    const playerData = {\r\n      name: \"\",\r\n      password: \"\",\r\n    };\r\n\r\n    try {\r\n      await Player.create(playerData);\r\n    } catch (error) {\r\n      expect(error).toBeDefined();\r\n    }\r\n  });\r\n\r\n  it(\"should create a player with default values for wins and losses\", async () => {\r\n    const playerData = {\r\n      name: \"Dillinger\",\r\n      password: \"alakulturin\",\r\n    };\r\n\r\n    const player = await Player.create(playerData);\r\n\r\n    expect(player.wins).toBe(0);\r\n    expect(player.losses).toBe(0);\r\n  });\r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/playerModelCheck.ts","C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}]]