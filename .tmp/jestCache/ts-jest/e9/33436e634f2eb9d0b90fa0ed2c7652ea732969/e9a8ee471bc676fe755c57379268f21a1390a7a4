[["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\game.test.ts",{"fileContent":"// game.test.ts\r\n\r\nimport { Game } from '../models/game'; \r\n\r\ndescribe('Game Interface', () => {\r\n  it('should create a game object with the correct properties', () => {\r\n    const game: Game = {\r\n      id: 1,\r\n      playerId: 2,\r\n      diceValue1: 3,\r\n      diceValue2: 4,\r\n      result: 7,\r\n      win: true,\r\n      createdAt: new Date('2023-10-04T10:35:40Z'),\r\n      updatedAt: new Date('2023-10-04T10:35:40Z'),\r\n    };\r\n\r\n    expect(game.id).toBe(1);\r\n    expect(game.playerId).toBe(2);\r\n    expect(game.diceValue1).toBe(3);\r\n    expect(game.diceValue2).toBe(4);\r\n    expect(game.result).toBe(7);\r\n    expect(game.win).toBe(true);\r\n    expect(game.createdAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n    expect(game.updatedAt).toEqual(new Date('2023-10-04T10:35:40Z'));\r\n  });\r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\controllers\\getAllPlayers.test.ts",{"fileContent":"// import { Request, Response } from \"express\";\r\n// import { getAllPlayers } from \"../../controllers/PlayerControllerCheck\";\r\n// import Player from \"src/models/playerModelCheck\";\r\n\r\n// describe('getAllPlayers', () => {\r\n//   it('should return a list of all players in the database', async () => {\r\n//     const mockPlayers = [\r\n//       { id: 1, name: 'Player 1', password: 'password1', wins: 0, losses: 0 },\r\n//       { id: 2, name: 'Player 2', password: 'password2', wins: 0, losses: 0 },\r\n//       { id: 3, name: 'Player 3', password: 'password3', wins: 0, losses: 0 }\r\n//     ];\r\n\r\n//     Player.findAll = jest.fn().mockResolvedValue(mockPlayers);\r\n\r\n//     const req = {} as Request;\r\n//     const res = {\r\n//       status: jest.fn().mockReturnThis(),\r\n//       json: jest.fn()\r\n//     } as unknown as Response;\r\n//     const next = jest.fn();\r\n\r\n//     await getAllPlayers(req, res, next);\r\n\r\n//     expect(Player.findAll).toHaveBeenCalledWith({});\r\n//     expect(res.status).toHaveBeenCalledWith(200);\r\n//     expect(res.json).toHaveBeenCalledWith({ players: mockPlayers });\r\n//     expect(next).not.toHaveBeenCalled();\r\n//   });\r\n// });\r\n","resolvedModuleNames":[]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\types\\createPlayerRequest.test.ts",{"fileContent":"  //  import { CreatePlayerRequest } from \"src/types/playerTypes\";\r\n   \r\n  //  // Create a player with a valid name and password\r\n  //   it('should create a player with a valid name and password', () => {\r\n  //       const request: CreatePlayerRequest = {\r\n  //         name: 'John Doe',\r\n  //         password: 'password123'\r\n  //       };\r\n  \r\n  //       const result = code_under_test.createPlayer(request);\r\n  \r\n  //       expect(result).toBeDefined();\r\n  //       expect(result.name).toBe(request.name);\r\n  //       expect(result.password).toBe(request.password);\r\n  //     });","resolvedModuleNames":[]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\gameModel.test.ts",{"fileContent":"const { DataTypes, MockSequelize } = require('sequelize-mock');\r\nconst { GameDb } = require('../models/gameModel');\r\n\r\ndescribe('GameDb Model', () => {\r\n  const mockDb = new MockSequelize();\r\n  const Game = mockDb.define('Games', {\r\n    id: {\r\n      type: DataTypes.BIGINT,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    diceValue1: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    diceValue2: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    result: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    win: {\r\n      type: DataTypes.BOOLEAN,\r\n      allowNull: false,\r\n    },\r\n    createdAt: {\r\n      type: DataTypes.DATE,\r\n      defaultValue: mockDb.fn('NOW'),\r\n      allowNull: false,\r\n    },\r\n    updatedAt: {\r\n      type: DataTypes.DATE,\r\n      defaultValue: mockDb.fn('NOW'),\r\n      allowNull: false,\r\n    },\r\n    playerId: {\r\n      type: DataTypes.INTEGER,\r\n      references: {\r\n        model: 'players',\r\n        key: 'id',\r\n      },\r\n      allowNull: false,\r\n    },\r\n  });\r\n\r\n  beforeAll(() => {\r\n    mockDb.models.Games = Game;\r\n  });\r\n\r\n\r\n  it('should create a game instance', async () => {\r\n    const gameData = {\r\n      diceValue1: 1,\r\n      diceValue2: 2,\r\n      result: 3,\r\n      win: true,\r\n      playerId: 1,\r\n    };\r\n  \r\n    const game = await Game.create(gameData);\r\n  \r\n    // Asegurarse de que el juego se haya creado correctamente\r\n    expect(game).toBeDefined();\r\n    expect(game.diceValue1).toBe(gameData.diceValue1);\r\n    expect(game.diceValue2).toBe(gameData.diceValue2);\r\n    expect(game.result).toBe(gameData.result);\r\n    expect(game.win).toBe(gameData.win);\r\n    expect(game.playerId).toBe(gameData.playerId);\r\n  \r\n    // Asegurarse de que las fechas se hayan establecido correctamente\r\n    expect(game.createdAt).toBeDefined();\r\n    expect(game.updatedAt).toBeDefined();\r\n  \r\n    // Asegurarse de que las fechas sean del tipo Date\r\n    expect(game.createdAt instanceof Date).toBe(true);\r\n    expect(game.updatedAt instanceof Date).toBe(true);\r\n  \r\n    // Asegurarse de que las fechas de creación y actualización sean aproximadamente iguales\r\n    const createdAtTimestamp = game.createdAt.getTime();\r\n    const updatedAtTimestamp = game.updatedAt.getTime();\r\n    expect(updatedAtTimestamp - createdAtTimestamp).toBeLessThanOrEqual(1000); // Menos de 1 segundo de diferencia\r\n  });\r\n  \r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/gameModel.ts","C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\models\\gameModel.ts",{"fileContent":"import { DataTypes,Model, Sequelize } from 'sequelize';\r\nimport  sequelize  from '../../config/sequelize.config';\r\n\r\ninterface GameAttributes{\r\n\tid: number;\r\n\tdiceValue1: number;\r\n\tdiceValue2: number;\r\n\tresult: number;\r\n\twin: boolean;\r\n    playerId: number;\r\n\tcreatedAt: Date;\r\n\tupdatedAt: Date;\r\n}\r\n\r\nexport interface GameInstance extends Model<GameAttributes>, GameAttributes {}\r\n\r\nexport const GameDb = sequelize.define<GameInstance>('Games', {\r\n    id: {\r\n        type: DataTypes.INTEGER,\r\n        primaryKey: true,\r\n        autoIncrement: true\r\n    },\r\n\tdiceValue1: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\tdiceValue2: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\tresult: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\tallowNull: false\r\n\t},\r\n\twin: {\r\n\t\ttype: DataTypes.BOOLEAN,\r\n\t\tallowNull: false\r\n\t},\r\n\tcreatedAt: {\r\n\t\ttype: DataTypes.DATE,\r\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n\t\tallowNull: false\r\n\t},\r\n\tupdatedAt: {\r\n\t\ttype: DataTypes.DATE,\r\n\t\tdefaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n\t\tallowNull: false\r\n\t},\r\n\tplayerId: {\r\n\t\ttype: DataTypes.INTEGER,\r\n\t\treferences: {\r\n\t\t\tmodel: 'players',\r\n\t\t\tkey: 'id'\r\n\t\t},\r\n\t\tallowNull: false\r\n\t}\r\n});\r\n\r\nGameDb.sync()","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/config/sequelize.config.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\config\\sequelize.config.ts",{"fileContent":"import { Sequelize } from 'sequelize-typescript';\r\n// import { Player } from '../models/player.model'; // Import your Player model\r\n\r\nconst sequelize = new Sequelize({\r\n  database: 'dicegame',\r\n  username: 'root',\r\n  password: 'password',\r\n  dialect: 'mysql',\r\n  host: 'localhost',\r\n  port: 3306,\r\n  logging: console.log,\r\n});\r\n\r\n// sequelize.addModels([Player]); // Add your Player model to Sequelize\r\n\r\nexport default sequelize;","resolvedModuleNames":[]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\__tests__\\controllers\\GameService.test.ts",{"fileContent":"import { roll, calcResult, checkWin, playGame } from '../../controllers/GameService';\r\n\r\ndescribe('Game Logic', () => {\r\n  describe('roll', () => {\r\n    it('should generate a random number between 1 and 6', () => {\r\n      const result = roll();\r\n      expect(result).toBeGreaterThanOrEqual(1);\r\n      expect(result).toBeLessThanOrEqual(6);\r\n    });\r\n  });\r\n\r\n  describe('calcResult', () => {\r\n    it('should calculate the sum of two numbers', () => {\r\n      const result = calcResult(2, 3);\r\n      expect(result).toBe(5);\r\n    });\r\n  });\r\n\r\n  describe('checkWin', () => {\r\n    it('should return true if the result is 7, otherwise false', () => {\r\n      expect(checkWin(7)).toBe(true);\r\n      expect(checkWin(5)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('playGame', () => {\r\n    it('should return a valid Game object with a defined id', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.id).toBeDefined();\r\n      });\r\n    \r\n      it('should return a valid Game object with diceValue1 in the range of 1 to 6', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.diceValue1).toBeGreaterThanOrEqual(1);\r\n        expect(game.diceValue1).toBeLessThanOrEqual(6);\r\n      });\r\n    \r\n      it('should return a valid Game object with diceValue2 in the range of 1 to 6', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.diceValue2).toBeGreaterThanOrEqual(1);\r\n        expect(game.diceValue2).toBeLessThanOrEqual(6);\r\n      });\r\n    \r\n      it('should return a valid Game object with result equal to the sum of diceValue1 and diceValue2', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.result).toBe(game.diceValue1 + game.diceValue2);\r\n      });\r\n    \r\n      it('should return a valid Game object with a boolean win property', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(typeof game.win).toBe('boolean');\r\n      });\r\n    \r\n      it('should return a valid Game object with playerId matching the provided playerId', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.playerId).toBe(playerId);\r\n      });\r\n    \r\n      it('should return a valid Game object with createdAt and updatedAt as instances of Date', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n        expect(game.createdAt).toBeInstanceOf(Date);\r\n        expect(game.updatedAt).toBeInstanceOf(Date);\r\n      });\r\n\r\n    it('should throw an error if the provided ID is not a number', () => {\r\n      // Use an invalid ID (a string in this case)\r\n      const invalidId: any = 'not_a_number';\r\n      expect(() => playGame(invalidId)).toThrowError('id must be a number');\r\n    });\r\n    it('should return a valid Game object with a winning result (sum = 7)', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n    \r\n        // Manually set the dice values to create a winning result\r\n        game.diceValue1 = 4;\r\n        game.diceValue2 = 3;\r\n    \r\n        // Recalculate result and check if it's a winning result\r\n        const expectedSum = game.diceValue1 + game.diceValue2;\r\n        expect(game.result).toBe(expectedSum);\r\n        expect(game.win).toBe(true);\r\n      });\r\n    \r\n      it('should return a valid Game object with a losing result (sum <> 7)', () => {\r\n        const playerId = 1;\r\n        const game = playGame(playerId);\r\n    \r\n        // Manually set the dice values to create a losing result\r\n        game.diceValue1 = 1;\r\n        game.diceValue2 = 2;\r\n    \r\n        // Recalculate result and check if it's a losing result\r\n        const expectedSum = game.diceValue1 + game.diceValue2;\r\n        expect(game.result).toBe(expectedSum);\r\n        expect(game.win).toBe(false);\r\n      });\r\n    \r\n      it('should generate unique IDs for different game instances', () => {\r\n        const playerId = 1;\r\n        const game1 = playGame(playerId);\r\n        const game2 = playGame(playerId);\r\n    \r\n        expect(game1.id).not.toBe(game2.id);\r\n      });\r\n    \r\n      it('should generate unique IDs for different players', () => {\r\n        const game1 = playGame(1);\r\n        const game2 = playGame(2);\r\n    \r\n        expect(game1.id).not.toBe(game2.id);\r\n      });\r\n    \r\n      it('should throw an error if the provided ID is not a number', () => {\r\n        // Use an invalid ID (a string in this case)\r\n        const invalidId: any = 'not_a_number';\r\n        expect(() => playGame(invalidId)).toThrowError('id must be a number');\r\n      });\r\n  });\r\n});\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/controllers/GameService.ts","C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}],["C:\\Users\\Ivand\\DiceGameMVC1\\src\\controllers\\GameService.ts",{"fileContent":"\r\nimport { Game } from '../models/game'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const roll = () => {\r\n\treturn Math.floor(Math.random() * 6) + 1;\r\n};\r\n\r\nexport const calcResult = (roll1: number, roll2: number) => {\r\n\treturn roll1 + roll2;\r\n};\r\n\r\nexport const checkWin = (result: number) => {\r\n     if (result === 7) return true  \r\n        else return false\r\n}   \r\nfunction generateRandomNumber() {\r\n    const uuid = uuidv4();\r\n    const hex = uuid.replace(/-/g, '').slice(0, 6);  // Tomar solo los primeros 15 caracteres\r\n    const bigIntValue = BigInt('0x' + hex);\r\n    return Number(bigIntValue);\r\n}\r\n\r\nexport const playGame = (id:number): Game => {\r\n    if(typeof id !== 'number') throw new Error('id must be a number'\r\n    )\r\n\tconst gameId :number = generateRandomNumber();\r\n\tconst diceValue1: number = roll();\r\n\tconst diceValue2: number = roll();\r\n\tconst result: number = calcResult(diceValue1,diceValue2);\r\n\tconst win: boolean = checkWin(result);\r\n\tconst playerId: number = id;\r\n\r\n\r\n\tconst gameResult: Game = {\r\n        id : gameId,\r\n\t\tdiceValue1,\r\n\t\tdiceValue2,\r\n\t\tresult,\r\n        win,\r\n\t\tplayerId,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n\t};\r\n\r\n\treturn gameResult;\r\n};\r\n\r\n","resolvedModuleNames":["C:/Users/Ivand/DiceGameMVC1/src/models/game.ts"]}]]