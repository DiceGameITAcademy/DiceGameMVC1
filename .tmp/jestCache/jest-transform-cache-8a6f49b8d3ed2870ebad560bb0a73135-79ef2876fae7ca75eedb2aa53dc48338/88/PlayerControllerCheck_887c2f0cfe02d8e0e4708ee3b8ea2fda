5542aa674a53f61ecfb3f3e23ce49038
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.playerLogout = exports.playerLogin = exports.getRankingAverage = exports.getRankingLosses = exports.getRanking = exports.getAverageWinningPercentage = exports.getPlayerWinningPercentage = exports.deletePlayer = exports.getPlayerLosingGames = exports.getPlayerWinningGames = exports.deletePlayerGames = exports.getPlayerGames = exports.playGameForPlayer = exports.modifyPlayerName = exports.getAllPlayers = exports.createPlayer = void 0;
const playerModelCheck_1 = __importDefault(require("../models/playerModelCheck"));
const gameModel_1 = require("../models/gameModel");
("../models/GameModel");
const GameService_1 = require("./GameService");
("../controllers/GameService");
function createPlayer(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let { name, password } = req.body;
            if (!name) {
                name = "ANONYMOUS";
            }
            const existingPlayer = yield playerModelCheck_1.default.findOne({ where: { name } });
            if (existingPlayer) {
                return res
                    .status(400)
                    .json({
                    error: "Player already exists, choose another name or go to log in",
                });
            }
            if (password.length < 6) {
                return res
                    .status(400)
                    .json({ error: "Password should be at least 6 characters long" });
            }
            const newPlayer = yield playerModelCheck_1.default.create({ name, password });
            res
                .status(201)
                .json({ message: "Player created successfully", player: newPlayer });
            next();
        }
        catch (error) {
            console.error("Error creating player:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.createPlayer = createPlayer;
function getAllPlayers(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const players = yield playerModelCheck_1.default.findAll();
            res.status(200).json({ players });
        }
        catch (error) {
            console.error("Error fetching players:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getAllPlayers = getAllPlayers;
function modifyPlayerName(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const { name } = req.body;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            player.name = name;
            yield player.save();
            res
                .status(200)
                .json({ message: "Player name updated successfully", player });
        }
        catch (error) {
            console.error("Error modifying player name:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.modifyPlayerName = modifyPlayerName;
//Play game for a player
function playGameForPlayer(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = Number(req.params.id);
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            const game = (0, GameService_1.playGame)(playerId);
            const newGame = yield gameModel_1.GameDb.create(game);
            res
                .status(200)
                .json({ message: "Game played successfully", game: newGame });
        }
        catch (error) {
            console.error("Error playing game:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.playGameForPlayer = playGameForPlayer;
//Get all games for a player
function getPlayerGames(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            const games = yield gameModel_1.GameDb.findAll({ where: { playerId } });
            res.status(200).json({ games });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getPlayerGames = getPlayerGames;
//Delete all games for a player
function deletePlayerGames(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            yield gameModel_1.GameDb.destroy({ where: { playerId } });
            res.status(200).json({ message: "Games deleted successfully" });
        }
        catch (error) {
            console.error("Error deleting player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.deletePlayerGames = deletePlayerGames;
//winning games for a player
function getPlayerWinningGames(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            const games = yield gameModel_1.GameDb.findAll({ where: { playerId, win: true } });
            res.status(200).json({ games });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getPlayerWinningGames = getPlayerWinningGames;
//losing games for a player
function getPlayerLosingGames(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            const games = yield gameModel_1.GameDb.findAll({ where: { playerId, win: false } });
            res.status(200).json({ games });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getPlayerLosingGames = getPlayerLosingGames;
function deletePlayer(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            yield player.destroy();
            res.status(200).json({ message: "Player deleted successfully" });
        }
        catch (error) {
            console.error("Error deleting player:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.deletePlayer = deletePlayer;
// Get winning percentage for a player
function getPlayerWinningPercentage(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const playerId = req.params.id;
            const player = yield playerModelCheck_1.default.findOne({ where: { id: playerId } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            const games = yield gameModel_1.GameDb.findAll({ where: { playerId } });
            const winningGames = yield gameModel_1.GameDb.findAll({
                where: { playerId, win: true },
            });
            const winningPercentage = (winningGames.length / games.length) * 100;
            res.status(200).json({ winningPercentage });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getPlayerWinningPercentage = getPlayerWinningPercentage;
// Get average win percentage for all players
function getAverageWinningPercentage(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const players = yield playerModelCheck_1.default.findAll();
            let totalWinningPercentage = 0;
            for (let i = 0; i < players.length; i++) {
                const games = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id },
                });
                const winningGames = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id, win: true },
                });
                const winningPercentage = (winningGames.length / games.length) * 100;
                totalWinningPercentage += winningPercentage;
            }
            const averageWinningPercentage = totalWinningPercentage / players.length;
            res.status(200).json({ averageWinningPercentage });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getAverageWinningPercentage = getAverageWinningPercentage;
//get ranking of players based on wins
function getRanking(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const players = yield playerModelCheck_1.default.findAll();
            let ranking = [];
            for (let i = 0; i < players.length; i++) {
                const games = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id },
                });
                const winningGames = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id, win: true },
                });
                const winningPercentage = (winningGames.length / games.length) * 100;
                ranking.push({ name: players[i].name, winningPercentage });
            }
            ranking.sort((a, b) => b.winningPercentage - a.winningPercentage);
            res.status(200).json({ ranking });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getRanking = getRanking;
//get ranking of players based on losses
function getRankingLosses(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const players = yield playerModelCheck_1.default.findAll();
            let ranking = [];
            for (let i = 0; i < players.length; i++) {
                const games = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id },
                });
                const losingGames = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id, win: false },
                });
                const losingPercentage = (losingGames.length / games.length) * 100;
                ranking.push({ name: players[i].name, losingPercentage });
            }
            ranking.sort((a, b) => b.losingPercentage - a.losingPercentage);
            res.status(200).json({ ranking });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getRankingLosses = getRankingLosses;
//get ranking of players based on average win percentage
function getRankingAverage(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const players = yield playerModelCheck_1.default.findAll();
            let ranking = [];
            for (let i = 0; i < players.length; i++) {
                const games = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id },
                });
                const winningGames = yield gameModel_1.GameDb.findAll({
                    where: { playerId: players[i].id, win: true },
                });
                const winningPercentage = (winningGames.length / games.length) * 100;
                ranking.push({ name: players[i].name, winningPercentage });
            }
            ranking.sort((a, b) => b.winningPercentage - a.winningPercentage);
            res.status(200).json({ ranking });
        }
        catch (error) {
            console.error("Error fetching player games:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.getRankingAverage = getRankingAverage;
function playerLogin(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { name, password } = req.body;
            // Check if the player exists by name
            const player = yield playerModelCheck_1.default.findOne({ where: { name } });
            if (!player) {
                return res.status(404).json({ error: "Player not found" });
            }
            // Check if the provided password matches the player's password
            if (player.password !== password) {
                return res.status(401).json({ error: "Incorrect password" });
            }
            // Player is successfully logged in
            res.status(200).json({ message: "Player logged in successfully", player });
        }
        catch (error) {
            console.error("Error logging in player:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.playerLogin = playerLogin;
function playerLogout(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // You can perform any necessary logic for logging out a player here
            // For example, clearing session data or tokens
            // Respond with a success message
            res.status(200).json({ message: "Player logged out successfully" });
        }
        catch (error) {
            console.error("Error logging out player:", error);
            res.status(500).json({ error: "Internal server error" });
            next(error);
        }
    });
}
exports.playerLogout = playerLogout;
