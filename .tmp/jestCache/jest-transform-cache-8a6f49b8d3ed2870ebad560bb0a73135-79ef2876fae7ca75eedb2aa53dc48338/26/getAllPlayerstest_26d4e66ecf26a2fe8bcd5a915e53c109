f4fcc4878ff798ed6f548eff39e7b9d7
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PlayerControllerCheck_1 = require("../../../controllers/PlayerControllerCheck");
const playerModelCheck_1 = __importDefault(require("src/models/playerModelCheck"));
describe('getAllPlayers', () => {
    it('should return a list of all players in the database', () => __awaiter(void 0, void 0, void 0, function* () {
        const mockPlayers = [
            { id: 1, name: 'Player 1', password: 'password1', wins: 0, losses: 0 },
            { id: 2, name: 'Player 2', password: 'password2', wins: 0, losses: 0 },
            { id: 3, name: 'Player 3', password: 'password3', wins: 0, losses: 0 }
        ];
        playerModelCheck_1.default.findAll = jest.fn().mockResolvedValue(mockPlayers);
        const req = {};
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };
        const next = jest.fn();
        yield (0, PlayerControllerCheck_1.getAllPlayers)(req, res, next);
        expect(playerModelCheck_1.default.findAll).toHaveBeenCalledWith({});
        expect(res.status).toHaveBeenCalledWith(200);
        expect(res.json).toHaveBeenCalledWith({ players: mockPlayers });
        expect(next).not.toHaveBeenCalled();
    }));
});
