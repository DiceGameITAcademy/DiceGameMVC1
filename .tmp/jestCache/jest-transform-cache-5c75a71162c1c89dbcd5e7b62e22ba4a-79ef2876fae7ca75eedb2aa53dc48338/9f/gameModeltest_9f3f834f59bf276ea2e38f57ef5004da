bc74412e24653952662944089408811f
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { DataTypes } = require('sequelize');
const { MockSequelize } = require('sequelize-mock');
const { GameDb } = require('../path-to-your-model-file');
describe('GameDb Model', () => {
    const mockDb = new MockSequelize();
    const Game = mockDb.define('Games', {
        id: {
            type: DataTypes.BIGINT,
            primaryKey: true,
            autoIncrement: true,
        },
        diceValue1: {
            type: DataTypes.INTEGER,
            allowNull: false,
        },
        diceValue2: {
            type: DataTypes.INTEGER,
            allowNull: false,
        },
        result: {
            type: DataTypes.INTEGER,
            allowNull: false,
        },
        win: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            defaultValue: mockDb.fn('NOW'),
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            defaultValue: mockDb.fn('NOW'),
            allowNull: false,
        },
        playerId: {
            type: DataTypes.INTEGER,
            references: {
                model: 'players',
                key: 'id',
            },
            allowNull: false,
        },
    });
    beforeAll(() => {
        mockDb.models.Games = Game;
    });
    it('should create a game instance', () => __awaiter(void 0, void 0, void 0, function* () {
        const game = yield Game.create({
            diceValue1: 1,
            diceValue2: 2,
            result: 3,
            win: true,
            playerId: 1,
        });
        expect(game).toBeDefined();
        expect(game.diceValue1).toBe(1);
        expect(game.diceValue2).toBe(2);
        expect(game.result).toBe(3);
        expect(game.win).toBe(true);
        expect(game.playerId).toBe(1);
    }));
    it('should create a game instance', () => __awaiter(void 0, void 0, void 0, function* () {
        const gameData = {
            diceValue1: 1,
            diceValue2: 2,
            result: 3,
            win: true,
            playerId: 1,
        };
        const game = yield Game.create(gameData);
        // Asegurarse de que el juego se haya creado correctamente
        expect(game).toBeDefined();
        expect(game.diceValue1).toBe(gameData.diceValue1);
        expect(game.diceValue2).toBe(gameData.diceValue2);
        expect(game.result).toBe(gameData.result);
        expect(game.win).toBe(gameData.win);
        expect(game.playerId).toBe(gameData.playerId);
        // Asegurarse de que las fechas se hayan establecido correctamente
        expect(game.createdAt).toBeDefined();
        expect(game.updatedAt).toBeDefined();
        // Asegurarse de que las fechas sean del tipo Date
        expect(game.createdAt instanceof Date).toBe(true);
        expect(game.updatedAt instanceof Date).toBe(true);
        // Asegurarse de que las fechas de creación y actualización sean aproximadamente iguales
        const createdAtTimestamp = game.createdAt.getTime();
        const updatedAtTimestamp = game.updatedAt.getTime();
        expect(updatedAtTimestamp - createdAtTimestamp).toBeLessThanOrEqual(1000); // Menos de 1 segundo de diferencia
    }));
});
